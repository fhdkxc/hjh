package kr.or.ddit.chat.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.chat.service.ChatRoomService;
import kr.or.ddit.util.ArticlePage;
import kr.or.ddit.vo.ChttRoomVO;
import kr.or.ddit.vo.ChttVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.SchulPsitnMberVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequiredArgsConstructor
@RequestMapping("/chat")
public class ChatRoomController {

	@Autowired
	ChatRoomService chatRoomService;

	// 친구 목록 조회
	@GetMapping("/friends")
	public String friend(@RequestParam(value = "schulCode", required = true) String schulCode) {

//			log.info("employeeList->schulCode : " + schulCode);
		// List<SchulPsitnMberVO> schulPsitnMberVOList =
		// this.chatRoomService.friendList(schulCode);
		// log.info("friendList->schulPsitnMberVOList : " + schulPsitnMberVOList);
		return "/chat/friend";
	}

	@ResponseBody
	@PostMapping("/friends")
	public List<SchulPsitnMberVO> friendList(@RequestBody(required = true) SchulPsitnMberVO schulPsitnMberVO, HttpServletRequest request) {
		// 로그인한 회원 ID
		MemberVO memberVO = (MemberVO) request.getSession().getAttribute("USER_INFO");
		String mberId = memberVO.getMberId();
		
		schulPsitnMberVO.setMberId(mberId);
		log.info("friendList->schulPsitnMberVO : " + schulPsitnMberVO);

//		String schulCode = schulPsitnMberVO.getSchulCode();

		List<SchulPsitnMberVO> schulPsitnMberVOList = this.chatRoomService.friendList(schulPsitnMberVO);

		log.info("friendList->schulPsitnMberVOList : " + schulPsitnMberVOList);

		return schulPsitnMberVOList;
	}

	// 채팅방 목록 조회
	@GetMapping("/rooms")
	public String rooms(HttpServletRequest request,
			@RequestParam(value = "schulCode", required = true) String schulCode,
			@RequestParam(value = "schulCode", required = true) String crtrId) {
//    	log.info("rooms->schulCode : " + schulCode);
//    	MemberVO memberVO = (MemberVO) request.getSession().getAttribute("USER_INFO");
//    	crtrId = memberVO.getMberId();
//		log.info("rooms->crtrId : " + crtrId);

		return "/chat/rooms";
	}

	// 나의 채팅방 목록
	@ResponseBody
	@PostMapping("/rooms")
	public List<ChttRoomVO> roomsList(HttpServletRequest request,
			@RequestBody(required = false) ChttRoomVO chttRoomVO) {

		MemberVO memberVO = (MemberVO) request.getSession().getAttribute("USER_INFO");
		String crtrId = memberVO.getMberId();
		String prtcpntId = memberVO.getMberId();
		chttRoomVO.setCrtrId(crtrId);
		chttRoomVO.setPrtcpntId(prtcpntId);

		String schulCode = chttRoomVO.getSchulCode();

		log.info("roomsList->crtrId : " + crtrId);
		log.info("roomsList->prtcpntId : " + prtcpntId);
		log.info("roomsList->schulCode : " + schulCode);

		log.info("roomsList->chttRoomVO : " + chttRoomVO);

		List<ChttRoomVO> chttRoomVOList = this.chatRoomService.roomsList(chttRoomVO);
		log.info("roomsList->chttRoomVOList : " + chttRoomVOList);

		return chttRoomVOList;
	}
	
//	// 이미 생성된 채팅방이 있는지 체크
//	@ResponseBody
//	@PostMapping("/roomChk")
//	public int roomChk(@RequestBody ChttRoomVO chttRoomVO) {
//		log.info("roomChk->crtrId : " + chttRoomVO.getCrtrId());
//		log.info("roomChk->prtcpntId : " + chttRoomVO.getPrtcpntId());
//
//		int result = this.chatRoomService.roomChk(chttRoomVO);
//		log.info("roomChk->result : " + result);
//
//		return result;
//	}

	// 채팅방 개설
	@ResponseBody
	@PostMapping("/room")
	public int createRooms(@RequestBody ChttRoomVO chttRoomVO) {
		log.info("createRooms->chttRoomVO전 : " + chttRoomVO);

		int result = this.chatRoomService.createRooms(chttRoomVO);
//        result += this.chatRoomService.createRoom(ChttVO);
		log.info("createRooms->result : " + result);
		log.info("createRooms->chttRoomVO후 : " + chttRoomVO);

		return result;
	}
	
	// 채팅방 코드 구하기
	@ResponseBody
	@PostMapping("/roomCode")
	public String roomCode(@RequestBody ChttRoomVO chttRoomVO) {
		log.info("roomCode->crtrId : " + chttRoomVO.getCrtrId());
		log.info("roomCode->prtcpntId : " + chttRoomVO.getPrtcpntId());
		
		String chttRoomCode = this.chatRoomService.roomCode(chttRoomVO);
		log.info("roomCode->chttRoomCode : " + chttRoomCode);
		
		return chttRoomCode;
	}
	

	// 채팅방 상세
	@GetMapping("/chtt")
	public String chtt(@RequestParam(value = "chttRoomCode") String chttRoomCode, Model model) {
		log.info("chtt->chttRoomCode : " + chttRoomCode);

		ChttRoomVO chttRoomVO = this.chatRoomService.chtt(chttRoomCode);
		log.info("chtt->chttRoomVO : " + chttRoomVO);

		model.addAttribute("chttRoomVO", chttRoomVO);
		return "/chat/chtt";
	}

	// 채팅내역
	@ResponseBody
	@PostMapping("/chtt")
	public List<ChttVO> chtts(@RequestBody String chttRoomCode) {
		log.info("chtts->chttRoomCode :" + chttRoomCode);
		chttRoomCode = chttRoomCode.substring(0, chttRoomCode.length() - 1);
		List<ChttVO> chttVOList = this.chatRoomService.chtts(chttRoomCode);
		log.info("chtts->chttVOList :" + chttVOList);

		return chttVOList;
	}
	
	// 채팅내역 - 무한스크롤 역순으로 어떻게 해야되나요? ㅠㅠ
//	@ResponseBody
//	@PostMapping("/chtt")
//	public ArticlePage<ChttVO> chtts(@RequestBody Map<String, Object> map) {
//		
//		String chttRoomCode = map.get("chttRoomCode").toString();
////		chttRoomCode = chttRoomCode.substring(0, chttRoomCode.length() - 1);
//		log.info("chtts->chttRoomCode :" + chttRoomCode);
//		
//		int currentPage = Integer.parseInt(map.get("currentPage").toString());
//		int size = Integer.parseInt(map.get("size").toString());
//		
//		int chttTotal = this.chatRoomService.chttTotal(map);
//		log.info("chtts->chttTotal : " + chttTotal);
//		log.info("String.valueOf(chttTotal) : "  + String.valueOf(chttTotal));
//		
//		// 채팅내역
//		List<ChttVO> chttVOList = this.chatRoomService.chtts(map);
//		log.info("chtts->chttVOList :" + chttVOList);
//		
//		// 페이지네이션
//		ArticlePage<ChttVO> data = new ArticlePage<ChttVO>(chttTotal, currentPage, size, chttVOList);
//
//		return data;
//	}

}