package kr.or.ddit.classroom.service.impl;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.classroom.mapper.FreeBoardMapper;
import kr.or.ddit.classroom.service.FreeBoardService;
import kr.or.ddit.common.mapper.CommonMapper;
import kr.or.ddit.vo.AnswerVO;
import kr.or.ddit.vo.AtchFileVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.NttVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class FreeBoardServiceImpl implements FreeBoardService {

	//자유게시판 매퍼 호출
	@Autowired
	FreeBoardMapper mapper;

	//회원가입에 있는 메소드를 사용하기 위해 CommonMapper호출
	@Autowired
	CommonMapper commonMapper;

	//파일 업로드 경로 호출
	@Autowired
	String uploadFolder;
	//D:\\upload

	@Override
	public int freeBoarRegistration(MemberVO memberVO, NttVO nttVO, List<MultipartFile> uploadList) {
		//수정해야함
		nttVO.setClasCode("OJ20240101");//아직 학급클래스가 존재하지 않아서 일단 하드하게 박아놓기
		nttVO.setMberId(memberVO.getMberId());//작성자 아이디 vo 세팅

		//학교 코드 가져오는 메소드
		String schulCode = commonMapper.getSchulCode(memberVO.getMberId());
		nttVO.setSchulCode(schulCode);//작성자 아이디로 조회한 학교 코드 vo 세팅
		log.info("nttVO의 schulCode 학교코드 값 -> " + schulCode);

		int res = mapper.freeBoarRegistration(nttVO);//게시글 텍스트 전송

		int res2 = 0;
		int result = 0;
		// 폴더생성
		if (uploadList != null && uploadList.size() != 0 && uploadList.get(0).getSize() > 0) {
			File fileFolder = new File(uploadFolder + "\\freeBoard\\");
			// D:\\upload\\freeBoard\\이미지
			// 개수만큼 폴더생성
			fileFolder.mkdirs();

			String atchFileCode = mapper.getFreeMaxCode(nttVO);
			AtchFileVO atchfileVO = new AtchFileVO();
			atchfileVO.setAtchFileCode(atchFileCode);//첨부파일 작성자 첨부파일코드

			// ↓시퀀스컬럼의 값을 위한 변수 ↓
			int fileCnt = 0;
			// 사용자가 올린 파일 복사
			for (MultipartFile multipartFile : uploadList) {
				String uuid = UUID.randomUUID().toString();

				String uploadFileName = uuid +"_"+ multipartFile.getOriginalFilename();
				// 복사할 파일을 어디에 저장할 지 경로 정하기 ↓↓↓↓↓
				String Filepath = uploadFolder  +"\\freeBoard\\"+ uploadFileName;
				//D:\\upload\\freeBoard\\uuid\\파일이름


				File saveFile = new File(Filepath);

				// 복사한 경로에 이미지 파일 업로드 ↓↓↓↓↓
				try {
					multipartFile.transferTo(saveFile);
				} catch (IllegalStateException | IOException e) {
					e.printStackTrace();
				}
				// (디비에 파일 저장하는 것임)ATACHFILE테이블에 파일 경로 및 컬럼 값 데이터 입력 ↓↓↓↓↓


				fileCnt++;
				atchfileVO.setAtchFileSn(fileCnt);//첨부파일 순번
				atchfileVO.setAtchFileCours("/freeBoard/"+ uploadFileName);//첨부파일경로
				atchfileVO.setAtchFileNm(multipartFile.getOriginalFilename());//첨부파일 이름
				atchfileVO.setAtchFileTy(multipartFile.getContentType());//첨부파일 유형
				atchfileVO.setRegistId(nttVO.getMberId());//첨부파일 등록자 아이디
				res2 = mapper.uploadFile(atchfileVO);
			}

			if((res + res2)==2){
				result = 1;
			}
		}else {
			result = res;
		}
		//1이면 성공 0이면 실패
		return result;

	}
	//가장 최근 게시물 코드 값 불러오기
	@Override
	public String getNttMaxCode() {
		String res = mapper.getNttMaxCode();
		return res;
	}

	//자유게시판 테이블 데이터 불러오기
	@Override
	public List<NttVO> selectNttList(Map<String, Object> map) {
		List<NttVO>nttVOList = mapper.selectNttList(map);
		return nttVOList;
	}

	//자유게시판 전체 게시물 수 불러오기
	@Override
	public int selectNttCount(Map<String, Object> map) {
		return mapper.selectNttCount(map);
	}

	//자유게시판 상세조회 데이터 가져오기
	@Override
	public NttVO freeBoardDetail(NttVO nttVO) {
		return mapper.freeBoardDetail(nttVO);
	}
	//자유게시판 조회수 증가 디비에 넣기
	@Override
	public int rdCntadd(NttVO nttVO) {
		return mapper.rdCntadd(nttVO);
	}
	///자유게시판 상세조회 해당 게시글 첨부파일 가져오기, //자유게시판 상세조회 해당 게시글 전체 첨부파일 다운로드를 위한 디비에 저장된 파일 명 가져오기
	@Override
	public List<AtchFileVO> selectAtchList(String nttAtchFileCode) {
		return mapper.selectAtchList(nttAtchFileCode);
	}

	//자유게시판 상세조회 해당 게시글 개별 첨부파일 다운로드를 위한 디비에 저장된 파일 명 가져오기
	@Override
	public AtchFileVO getFileName(AtchFileVO atchFileCode) {
		return mapper.getFileName(atchFileCode);
	}

	//자유게시판 상세조회 삭제
	@Override
	public int deleteFreeBoard(NttVO nttVO) {
		int res = mapper.deleteFreeBoard(nttVO);
		int res2 = mapper.deleteAtchFile(nttVO.getNttAtchFileCode());

		int result = res + res2;

		if((res + res2)==2){
			result = 1;
		}else {
		result = res;
		}
		return result;
	}
	//자유게시판 상세조회 수정
	@Override
	public int updateFreeBoardAjax(NttVO nttVO, AtchFileVO atchFileVO, String[] snArray, List<MultipartFile> uploadList,MemberVO memberVO) {
		int res= 0;
		if(snArray != null) {
			AtchFileVO atchFileVO2 = new AtchFileVO();
			for (int i = 0; i < snArray.length; i++) {
				atchFileVO2.setAtchFileCode(atchFileVO.getAtchFileCode());
				atchFileVO2.setAtchFileSn(Integer.parseInt(snArray[i]) );
				mapper.deleteAtchFile2(atchFileVO2);
			}

			List<AtchFileVO>fileVOList =  mapper.selectAtchList(atchFileVO.getAtchFileCode());
			for (int i = 0; i < fileVOList.size(); i++) {
				Map<String, Object> updateAtchFileSnMap = new HashMap<String, Object>();
				updateAtchFileSnMap.put("atchFileCode", atchFileVO.getAtchFileCode());
				updateAtchFileSnMap.put("orignAtchFileSn", fileVOList.get(i).getAtchFileSn());
				updateAtchFileSnMap.put("atchFileSn", i+1);
				mapper.updateFileSn(updateAtchFileSnMap);
			}
		}

		if (uploadList != null && uploadList.size() != 0 && uploadList.get(0).getSize() > 0) {
			List<AtchFileVO> fileVOList =  mapper.selectAtchList(atchFileVO.getAtchFileCode());
			File fileFolder = new File(uploadFolder + "\\freeBoard\\");
			// D:\\upload\\freeBoard\\이미지
			// 개수만큼 폴더생성
			fileFolder.mkdirs();

			String atchFileCode = "";
			if(fileVOList != null && fileVOList.size() > 0) {
				atchFileCode = atchFileVO.getAtchFileCode();
			}else {
				// 등록할때는 파일 안올리고 수정할 때 처음 올리는 상황
				atchFileCode = mapper.getFreeMaxCode(nttVO);
			}
			AtchFileVO atchfileVO = new AtchFileVO();
			atchfileVO.setAtchFileCode(atchFileCode);//첨부파일 작성자 첨부파일코드

			// ↓시퀀스컬럼의 값을 위한 변수 ↓
			int fileCnt = fileVOList.size();
			// 사용자가 올린 파일 복사
			for (MultipartFile multipartFile : uploadList) {
				String uuid = UUID.randomUUID().toString();

				String uploadFileName = uuid +"_"+ multipartFile.getOriginalFilename();
				// 복사할 파일을 어디에 저장할 지 경로 정하기 ↓↓↓↓↓
				String Filepath = uploadFolder  +"\\freeBoard\\"+ uploadFileName;
				//D:\\upload\\freeBoard\\uuid\\파일이름

				File saveFile = new File(Filepath);

				// 복사한 경로에 이미지 파일 업로드 ↓↓↓↓↓
				try {
					multipartFile.transferTo(saveFile);
				} catch (IllegalStateException | IOException e) {
					e.printStackTrace();
				}
				// (디비에 파일 저장하는 것임)ATACHFILE테이블에 파일 경로 및 컬럼 값 데이터 입력 ↓↓↓↓↓

				multipartFile.getOriginalFilename();

				++fileCnt;
				atchfileVO.setAtchFileSn(fileCnt);//첨부파일 순번
				atchfileVO.setAtchFileCours("/freeBoard/"+ uploadFileName);//첨부파일경로
				atchfileVO.setAtchFileNm(multipartFile.getOriginalFilename());//첨부파일 이름
				atchfileVO.setAtchFileTy(multipartFile.getContentType());//첨부파일 유형
				atchfileVO.setRegistId(memberVO.getMberId());//첨부파일 등록자 아이디
				mapper.uploadFile(atchfileVO);
			}


		}
		res = mapper.updateFreeBoardAjax(nttVO);

		return res;
	}
	@Override
	public NttVO selectNttVO(NttVO nttVO) {
		return mapper.selectNttVO(nttVO);
	}
	@Override
	public int createReply(AnswerVO answerVO, MemberVO memberVO) {
		int res = 0;
		int squ = mapper.getMaxAnswerCode();
		//작성자의 반 코드 가져오기
		String schulCode = commonMapper.getSchulCode(memberVO.getMberId());
		//댓글 VO에 반코드 세팅
		answerVO.setSchulCode(schulCode);
		//댓글 코드에 시퀀스 세팅
		++squ;
		answerVO.setAnswerCode(String.valueOf(squ));
		res = mapper.createReply(answerVO);
		return res;
	}
	
	@Override
	public List<AnswerVO> selectReply(NttVO nttVO) {
		return mapper.selectReply(nttVO);
	}
	
	@Override
	public int deleteReply(AnswerVO answerVO) {
		return mapper.deleteReply(answerVO);
	}

}
